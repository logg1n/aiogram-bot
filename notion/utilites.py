import os

from pprint import  pprint
from typing import Any, Dict, List

from notion_client import Client
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

notion_token = os.getenv('NOTION_TOKEN')
client = Client(auth=notion_token)

class Utils:
	@staticmethod
	def extract_property_value(prop: dict):
		match prop.get("type"):
			case "title":
				return "".join(t.get("plain_text", "") for t in prop["title"])
			case "rich_text":
				return "".join(t.get("plain_text", "") for t in prop["rich_text"])
			case "number":
				return prop.get("number")
			case "select":
				return prop.get("select", {}).get("name")
			case "multi_select":
				return [opt.get("name") for opt in prop.get("multi_select", [])]
			case "date":
				return prop.get("date", {}).get("start")
			case "checkbox":
				return prop.get("checkbox")
			case "url":
				return prop.get("url")
			case "email":
				return prop.get("email")
			case "phone_number":
				return prop.get("phone_number")
			case "people":
				return [p.get("name", "") for p in prop.get("people", [])]
			case _:
				return f"[{prop.get("type")}]"

	def format_notion_telegram_message(results: List[dict], with_links: bool = True) -> str:
		from datetime import datetime

		if not results:
			return "‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã."

		messages = []

		for entry in results:
			lines = []

			ticker = entry.get("–¢–∏–∫–µ—Ä", "–ë–µ–∑ —Ç–∏–∫–µ—Ä–∞")
			deal_type = entry.get("–¢–∏–ø —Å–¥–µ–ª–∫–∏", "–°–¥–µ–ª–∫–∞")
			status = entry.get("–°—Ç–∞—Ç—É—Å", "")
			page_id = entry.get("id")

			# üü¢ –°—Ç–∞—Ç—É—Å ‚Üí —ç–º–æ–¥–∑–∏
			status_emoji = {
				"–ê–∫—Ç–∏–≤–Ω–∞": "üü¢",
				"–ó–∞–∫—Ä—ã—Ç–∞": "üî¥",
				"–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ö™",
			}.get(status, "‚öôÔ∏è")

			# üìà –¢–∏–ø —Å–¥–µ–ª–∫–∏ ‚Üí —ç–º–æ–¥–∑–∏
			deal_emoji = {
				"Long": "üìà",
				"Short": "üìâ",
			}.get(deal_type, "üíº")

			header = f"{status_emoji} <b>{ticker}</b> ‚Äî {deal_emoji} <i>{deal_type}</i> <code>{status}</code>"

			if with_links and page_id:
				clean_id = page_id.replace("-", "")
				url = f"https://www.notion.so/{clean_id}"
				header += f"\nüîó <a href=\"{url}\">–û—Ç–∫—Ä—ã—Ç—å –≤ Notion</a>"

			lines.append(header)
			lines.append("")

			for field, value in entry.items():
				if field in ("–¢–∏–∫–µ—Ä", "–°—Ç–∞—Ç—É—Å", "–¢–∏–ø —Å–¥–µ–ª–∫–∏", "id"):
					continue

				if isinstance(value, str) and field == "–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏":
					try:
						value = datetime.fromisoformat(value.replace("Z", "+00:00")).strftime("%d.%m.%Y")
					except Exception:
						pass

				if value in (None, "", [], {}):
					value = "‚Äî"

				# –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
				field_emoji = {
					"–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏": "üóì",
					"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": "üí∞",
					"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞": "üèÅ",
					"–û–±—ä–µ–º": "üì¶",
					"–ö–æ–º–∏—Å—Å–∏–∏": "üí∏",
					"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "üìù",
				}.get(field, "‚Ä¢")

				lines.append(f"{field_emoji} <b>{field}:</b> {value}")

			messages.append("\n".join(lines))

		return "\n\n".join(messages)


if __name__ == "__main__":
	database_id = "21185b6b-d4cc-816a-8ff6-d542fdaf02aa"

	# client.blocks.children.list(os.getenv('PARENT_PAGE_ID'))
	# client.blocks.retrieve("21185b6b-d4cc-816a-8ff6-d542fdaf02a")
	# val = client.blocks.retrieve('21185b6bd4cc81e48c76c4b2b20a7a1b')
	# pages = client.databases.query(database_id=database_id).get("results", [])
	'21185b6bd4cc81e48c76c4b2b20a7a1b'
	# if val.get('parent')['type'] == 'database_id':
	page = client.pages.retrieve('21185b6b-d4cc-81e4-8c76-c4b2b20a7a1b')
	pprint(page)



	new_page = {
		"parent": {"database_id": database_id},
		"properties": {
			"–¢–∏–∫–µ—Ä": {
				"title": [
					{
						"text": {
							"content": "ZPL"
						}
					}
				]
			},
			"–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏": {
				"date": {
					"start": datetime.now().date().isoformat()
				}
			},
			"–°—Ç–∞—Ç—É—Å": {
				"select": {
					"name": "–ê–∫—Ç–∏–≤–Ω–∞"
				}
			},
			"–¢–∏–ø —Å–¥–µ–ª–∫–∏": {
				"select": {
					"name": "Long"
				}
			},
			"–û–±—ä–µ–º": {
				"number": 15
			},
			"–ö–æ–º–∏—Å—Å–∏–∏": {
				"number": 2.5
			},
			"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": {
				"number": 185.3
			},
			"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞": {
				"number": 190.7
			},
			"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
				"rich_text": [
					{
						"text": {
							"content": "–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –æ—Ç 20.06"
						}
					}
				]
			}
		}
	}

	# client.pages.create( **new_page)
	# 21185b6b-d4cc-816a-8ff6-d542fdaf02aa
