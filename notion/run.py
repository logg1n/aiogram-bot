import requests
import time
import os
import logging

logger = logging.getLogger('notion_webhook')

def send_telegram_notification(message: str, retries=3, timeout=5, delay=2) -> bool:
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')

    if not token or not chat_id:
        logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
        return False

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message[:1000],
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }

    for attempt in range(1, retries + 1):
        try:
            logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            response = requests.post(url, data=payload, timeout=timeout)
            logger.debug(f"Telegram response: {response.status_code} | {response.text}")
            response.raise_for_status()
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        except requests.exceptions.ReadTimeout:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
        except requests.exceptions.HTTPError as http_err:
            logger.error(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –æ—Ç Telegram: {http_err}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response.text}")
            # –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ 400 –∏–ª–∏ 403
            break
        except Exception as e:
            logger.exception(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            break
        time.sleep(delay)

    logger.error("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤")
    return False


import requests
import time
import os
import logging

logger = logging.getLogger('notion_webhook')

–≤–º–µ—Å—Ç–æ properties = get_page_properties(page_id)
		properties = safe_get_page_properties(page_id)



def safe_get_page_properties(page_id, retries=3, timeout=10, delay=2):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Notion API —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    token = os.getenv("NOTION_TOKEN")
    if not token:
        logger.error("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return None

    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {
        "Authorization": f"Bearer {token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }

    for attempt in range(1, retries + 1):
        try:
            logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –∑–∞–ø—Ä–æ—Å –∫ {url}")
            response = requests.get(url, headers=headers, timeout=timeout)
            response.raise_for_status()
            logger.info("‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω—ã")
            return response.json().get("properties", {})
        except requests.exceptions.ReadTimeout:
            logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Notion (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
        except requests.exceptions.HTTPError as http_err:
            logger.error(f"üî¥ HTTP –æ—à–∏–±–∫–∞: {response.status_code} ‚Äì {response.text}")
            break  # –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤ —Å–ª—É—á–∞–µ 401/404
        except Exception as e:
            logger.exception(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break
        time.sleep(delay)

    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return None
