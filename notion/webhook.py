import os
import hmac
import hashlib
import json
import requests
from requests import Response

from waitress import serve
from flask import Flask, request, jsonify, Blueprint
from dotenv import load_dotenv
import logging
from logging.handlers import RotatingFileHandler

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv('.env')
app = Flask(__name__)
routes = Blueprint("routes", __name__)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger('notion_webhook')
    logger.setLevel(logging.INFO)

    handler = RotatingFileHandler(
        'notion_webhook.log',
        maxBytes=1024 * 1024,
        backupCount=3
    )
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    return logger


logger = setup_logging()

WEBHOOK_TOKEN = os.getenv('NOTION_WEBHOOK_TOKEN')
NOTION_TOKEN = os.getenv('NOTION_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

class NotionWebhookHandler:

    @staticmethod
    def verify_signature(request) -> bool:
        if not WEBHOOK_TOKEN:
            logger.error("Notion WEBHOOK_TOKEN not configured")
            return False

        signature_header = request.headers.get('X-Notion-Signature')
        if not signature_header:
            logger.warning("Missing X-Notion-Signature header")
            return False

        # –°—á–∏—Ç–∞–µ–º HMAC –æ—Ç _—Å—ã—Ä—ã—Ö_ –±–∞–π—Ç —Ç–µ–ª–∞
        body_bytes = request.get_data()

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç
        logger.debug(f"Raw body for HMAC: {body_bytes[:200]!r}")

        mac = hmac.new(secret.encode('utf-8'),
                       body_bytes,
                       hashlib.sha256)
        expected = "sha256=" + mac.hexdigest()

        logger.debug(f"Expected sig: {expected}")
        logger.debug(f"Received sig: {signature_header}")

        if not hmac.compare_digest(expected, signature_header):
            logger.error("Signature mismatch")
            return False

        return True

def send_telegram_notification(message: str) -> bool:
    if not TELEGRAM_TOKEN or not CHAT_ID:
        logger.error("Telegram credentials not configured: "
                     f"TOKEN={bool(TELEGRAM_TOKEN)}, CHAT_ID={bool(CHAT_ID)}")
        return False

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message[:1000] or "Empty message",
        # "parse_mode": "Markdown"  # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è —Ç–µ—Å—Ç–∞!
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON, —á—Ç–æ–±—ã Telegram —Å—Ä–∞–∑—É –ø—Ä–∏–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç
        response = requests.post(url, json=payload, timeout=5)
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:
        logger.info(f"Telegram API response: {response.status_code} {response.text}")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å != 200, response.raise_for_status() –≤—ã–∑–æ–≤–µ—Ç HTTPError
        response.raise_for_status()
        return True

    except requests.exceptions.HTTPError as http_err:
        logger.error(f"HTTPError from Telegram: {http_err}")
    except Exception as e:
        logger.exception(f"Unexpected error sending to Telegram: {e}")

    return False


def get_page_properties(page_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not page_id:
        logger.error(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
        return None

    logger.info(f"Webhook —Å—Ç–∞—Ä—Ç—É–µ—Ç... TOKEN = {repr(os.getenv('NOTION_TOKEN'))}")

    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }

    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å–≤–æ–π—Å—Ç–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
        response = requests.get(url, headers=headers, timeout=5)

        # test_response = requests.get(
        #     url="https://api.notion.com/v1/pages/21185b6bd4cc80b0b129f2ebc68965ce",
        #     headers={
        #         "Authorization": "Bearer secret_epg5fxwiHdLmh58HR3K70KEbjcRssWYqnOIzrIkQyiM",
        #         "Notion-Version": "2022-06-28",
        #         "Content-Type": "application/json",
        #     }
        # )
        # logger.info(f"------------------------------------------"
        #             f"Test Request: {test_response.status_code}"
        #             f"------------------------------------------")

        logger.debug(f"Final headers: {test_response.request.headers}")

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        if response.status_code == 401:
            logger.error("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ NOTION_TOKEN")
            return None
        elif response.status_code == 404:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ 404: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}")
            return None
        elif response.status_code == 429:
            logger.error("‚ùå –û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return None

        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–π—Å—Ç–≤
        data = response.json()
        properties = data.get("properties")
        if not properties:
            logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤ (–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç properties)")

        return properties

    except requests.exceptions.RequestException as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Notion API: {e}")
        return None


def debug_page_access(page_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    if not NOTION_TOKEN:
        return "‚ùå NOTION_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }

    try:
        response = requests.get(url, headers=headers, timeout=5)
        return f"–°—Ç–∞—Ç—É—Å: {response.status_code}\n–û—Ç–≤–µ—Ç: {response.text[:200]}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"


def get_property_value(prop_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not prop_data:
        return ""

    prop_type = prop_data.get('type')
    if not prop_type:
        return "[unknown type]"

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤–æ–π—Å—Ç–≤
        if prop_type == "title":
            return "".join(t["plain_text"] for t in prop_data.get("title", []))

        elif prop_type == "rich_text":
            return "".join(t["plain_text"] for t in prop_data.get("rich_text", []))

        elif prop_type == "number":
            return str(prop_data.get("number", ""))

        elif prop_type == "select":
            select = prop_data.get("select")
            return select["name"] if select else ""

        elif prop_type == "multi_select":
            options = prop_data.get("multi_select", [])
            return ", ".join(opt["name"] for opt in options)

        elif prop_type == "checkbox":
            return "‚òë" if prop_data.get("checkbox") else "‚òê"

        elif prop_type == "date":
            date_obj = prop_data.get("date")
            if not date_obj:
                return ""
            start = date_obj.get("start", "")
            end = date_obj.get("end", "")
            return f"{start} ‚Üí {end}" if end else start

        elif prop_type == "url":
            return prop_data.get("url", "")

        elif prop_type == "email":
            return prop_data.get("email", "")

        elif prop_type == "phone_number":
            return prop_data.get("phone_number", "")

        elif prop_type == "people":
            people = prop_data.get("people", [])
            return ", ".join(p.get("name", "unknown") for p in people)

        elif prop_type == "files":
            files = prop_data.get("files", [])
            return ", ".join(f.get("name", "unnamed") for f in files)

        else:
            return f"[{prop_type}]"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞ {prop_type}: {e}")
        return "[error]"


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram"""
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))


def process_notion_event(data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç Notion"""
    event_type = data.get('type')
    entity = data.get('entity', {})
    entity_type = entity.get('type')

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event_type} (—Å—É—â–Ω–æ—Å—Ç—å: {entity_type})")

    if not event_type:
        logger.error("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        return {"status": "error"}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
    if event_type.startswith('page.'):
        page_id = entity.get('id')
        if not page_id:
            logger.error("ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return {"status": "error"}

        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        page_url = f"https://www.notion.so/{page_id}"
        message = (
            f"üìù *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã*\n"
            f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: `{event_type}`\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: [–æ—Ç–∫—Ä—ã—Ç—å]({page_url})\n"
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤
        if event_type == "page.properties_updated":
            updated_properties = data.get('data', {}).get('updated_properties', [])
            properties = get_page_properties(page_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            page_url = f"https://www.notion.so/{page_id}"
            message = (
                f"üìù *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã*\n"
                f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: `{event_type}`\n"
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: [–æ—Ç–∫—Ä—ã—Ç—å]({page_url})\n"
            )

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞
            if properties is None:
                debug_info = debug_page_access(page_id)
                message += (
                    "\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã*\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    f"1. –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
                    f"2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å NOTION_TOKEN\n"
                    f"3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"
                    f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n```\n{debug_info}\n```"
                )
            else:
                message += "\n*–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:*\n"
                found_updates = False

                for encoded_prop_id in updated_properties:
                    try:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º ID —Å–≤–æ–π—Å—Ç–≤–∞
                        prop_id = urllib.parse.unquote(encoded_prop_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {encoded_prop_id}: {e}")
                        continue

                    # –ò—â–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ ID
                    prop_data = None
                    prop_name = "unknown"

                    for name, data in properties.items():
                        if data.get('id') == prop_id:
                            prop_data = data
                            prop_name = name
                            break

                    if not prop_data:
                        message += f"‚Ä¢ `{prop_id}`: —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
                    prop_value = get_property_value(prop_data)
                    message += (
                        f"‚Ä¢ *{escape_markdown(prop_name)}*: "
                        f"{escape_markdown(prop_value)}\n"
                    )
                    found_updates = True

                if not found_updates:
                    message += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        send_telegram_notification(message)
        return {"status": "processed"}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
    else:
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        return {"status": "skipped"}


@routes.route('/notion-webhook', methods=['GET', 'POST'])
def webhook_endpoint():
    try:
        # logger.info(f"Token: {os.getenv('NOTION_WEBHOOK_TOKEN')[:5]}...")
        # logger.info(f"Telegram token: {os.getenv('TELEGRAM_BOT_TOKEN')[:5]}...")
        # logger.info(f"Incoming {request.method} request from {request.remote_addr}")
        # logger.info(f"Headers: {dict(request.headers)}")
        # logger.info(f"Content-Type: {request.content_type}")
        # logger.info(f"Raw body (first 200 chars): {str(request.get_data())[:200]}")

        if request.method == 'GET':
            return jsonify({
                "status": "active",
                "service": "notion-webhook",
            }), 200

        if not request.is_json:
            logger.error("Invalid content type")
            return jsonify({"error": "Content-Type must be application/json"}), 400

        try:
            data = request.get_json()

            # –ü–æ—Å–ª–µ request.get_json()
            logger.info(f"Full event type: {data.get('type')}")
            logger.info(f"Object type: {data.get('object')}")
            logger.info(f"Parsed JSON data: {data}")
        except Exception as e:
            logger.error(f"JSON parse error: {str(e)}")
            raise
        logger.debug(f"Request data: {json.dumps(data, indent=2)}")

        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if data.get('type') == 'webhook_verification':
            if 'challenge' in data:
                logger.info("Webhook verification successful")
                return jsonify({"challenge": data['challenge']}), 200
            return jsonify({"error": "Missing challenge"}), 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        # if not NotionWebhookHandler.verify_signature(request):
            # return jsonify({"error": "Invalid signature"}), 403

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
        result = process_notion_event(data)
        return jsonify(result), 200

    except Exception as e:
        logger.exception("Unhandled exception in webhook handler")
        return jsonify({"error": "Internal server error"}), 500


app.register_blueprint(routes)

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    logger.info(f"Starting server on port {port}")
    serve(app, host="0.0.0.0", port=port)