import os
import asyncio
import aiohttp

from dotenv import load_dotenv
from notion_client import Client, AsyncClient

try:
    from importlib.metadata import version
except ImportError:
    from importlib_metadata import version  # –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Python

sdk_version = version("notion-client")
load_dotenv()

token = "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"
page_id = "21185b6b-d4cc-80b0-b129-f2ebc68965ce"


def validate_token_and_access(token, page_id):
    tips = []

    if not token:
        return "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω", ["–ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN."]

    if not page_id:
        return "‚ùå ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –∑–∞–¥–∞–Ω", ["–ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PARENT_PAGE_ID."]

    if not (token.startswith("ntn_") or token.startswith("secret_")):
        tips.append("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

    if len(token.strip()) < 40:
        tips.append("‚ö†Ô∏è –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")

    if "-" not in page_id:
        tips.append("‚ö†Ô∏è ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID —Å —Ç–∏—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2118-...)")

    tips.append("üß™ –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Notion.")
    tips.append("‚Üí –û—Ç–∫—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion ‚Üí 'Share' ‚Üí 'Connect with integrations' ‚Üí –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")

    return "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∑–∞–≤–µ—Ä—à–µ–Ω–∞", tips


def check_token_format(token):
    if token.startswith("ntn_"):
        return "‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (ntn_)"
    elif token.startswith("secret_"):
        return "‚òëÔ∏è –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (secret_)"
    else:
        return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"


async def check_async_access(token, page_id):
    notion = AsyncClient(auth=token)
    try:
        page = await notion.pages.retrieve(page_id=page_id)
        return "‚úÖ Async –¥–æ—Å—Ç—É–ø: OK", page.get("url")
    except Exception as e:
        return f"‚ùå Async –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}", None


def check_sync_access(token, page_id):
    notion = Client(auth=token)
    try:
        page = notion.pages.retrieve(page_id=page_id)
        return "‚úÖ Sync –¥–æ—Å—Ç—É–ø: OK", page.get("url")
    except Exception as e:
        return f"‚ùå Sync –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}", None


async def validate_via_http(token, page_id):
    headers = {
        "Authorization": f"Bearer {token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json"
    }
    results = {}

    async with aiohttp.ClientSession(headers=headers) as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ /users/me
        try:
            async with session.get("https://api.notion.com/v1/users/me") as resp:
                if resp.status == 200:
                    results["/users/me"] = "‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω"
                elif resp.status == 401:
                    results["/users/me"] = "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (401)"
                else:
                    results["/users/me"] = f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {resp.status}"
        except Exception as e:
            results["/users/me"] = f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /users/me: {e}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        try:
            url = f"https://api.notion.com/v1/pages/{page_id}"
            async with session.get(url) as resp:
                if resp.status == 200:
                    results["/pages"] = "‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å"
                elif resp.status == 404:
                    results["/pages"] = "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                elif resp.status == 403:
                    results["/pages"] = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (403)"
                elif resp.status == 401:
                    results["/pages"] = "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (401)"
                else:
                    results["/pages"] = f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {resp.status}"
        except Exception as e:
            results["/pages"] = f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}"

    return results


async def main():
    print("üîç Notion –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...\n")

    if not token or not page_id:
        print("üö´ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NOTION_TOKEN –∏/–∏–ª–∏ PARENT_PAGE_ID")
        return

    print(f"üî¢ –í–µ—Ä—Å–∏—è SDK: {sdk_version}")
    print(f"üîê –¢–æ–∫–µ–Ω: {token[:10]}... ({len(token)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"üß¨ –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {check_token_format(token)}")
    print(f"üìÑ Page ID: {page_id}")

    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
    sync_status, sync_url = check_sync_access(token, page_id)
    print(sync_status)
    if sync_url:
        print(f"üîó URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {sync_url}")

    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
    async_status, async_url = await check_async_access(token, page_id)
    print(async_status)
    if async_url:
        print(f"üîó URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {async_url}")

    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP-–¥–æ—Å—Ç—É–ø–∞ (–ø–æ REST):")
    results = await validate_via_http(token, page_id)
    for key, status in results.items():
        print(f"{key}: {status}")


if __name__ == "__main__":
    print("\nüìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
    status, suggestions = validate_token_and_access(token, page_id)
    print(status)
    for line in suggestions:
        print(f"   {line}")

    asyncio.run(main())
