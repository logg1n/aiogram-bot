from flask import Flask
from dotenv import load_dotenv
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('../.env')  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprint (–ø–µ—Ä–µ–Ω–µ—Å–µ–º –≤–∞—à –∫–æ–¥)
from flask import Blueprint, request, jsonify
from dotenv import set_key, get_key
import json

routes = Blueprint("routes", __name__)


@routes.route('/notion-webhook', methods=['POST'])
def handle_webhook():
	try:
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
		if not request.is_json:
			return jsonify({"error": "Request must be JSON"}), 400

		data = request.get_json()

		# 1. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
		if 'verification_token' in data:
			verification_token = data['verification_token']
			set_key('../.env', "NOTION_WEBHOOK_TOKEN", verification_token)

			if 'challenge' in data:
				return jsonify({"challenge": data['challenge']}), 200
			return jsonify({"status": "Token saved"}), 200

		# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
		saved_token = get_key('../.env', "NOTION_WEBHOOK_TOKEN")
		if not saved_token:
			return jsonify({"error": "Token not registered"}), 403

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Notion
		incoming_token = request.headers.get('X-Notion-Signature', '')
		if incoming_token and incoming_token != saved_token:
			return jsonify({"error": "Invalid token"}), 403

		# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		app.logger.info("üì¢ –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: %s", json.dumps(data, indent=2))
		return jsonify({"status": "success"}), 200

	except Exception as e:
		app.logger.error("‚ùå –û—à–∏–±–∫–∞: %s", str(e))
		return jsonify({"error": str(e)}), 500


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprint
app.register_blueprint(routes)

if __name__ == '__main__':
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	from waitress import serve

	serve(app, host="0.0.0.0", port=5000)